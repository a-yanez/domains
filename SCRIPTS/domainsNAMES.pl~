use strict;
#use warnings;
use Data::Dumper;

my $FOfile=$ARGV[0]; #The outfile file from FastOrtho
my $Pfamfile=$ARGV[1]; #The outfile from PfamScan

my %families=FAMS($FOfile);

print Dumper %families;
foreach my $key (sort keys %families){
	#print("$key\n");
	my @familynumber=split(/L/,$key);
	my $familysize=`grep -w $key $FOfile | cut -f1  | cut -f2 -d'(' | cut -f1 -d' '`;
	#print("$familynumber[1]\n");
	my $genecount=1;
	#foreach my $geneID (@{%families{$key}}){
		#print("$geneID\n");
		#my @IDs=split(/\(|\)/,$geneID);
		#print("$IDs[0]\t$IDs[1]\n")
		#my @domains=`grep -P "$IDs[0]\t" $Pfamfile | grep $IDs[1] | cut -f6,7,8,15`;
		#chomp @domains;
		#foreach my $domain(@domains){
			#print("fam$familynumber[1]\tgen\_$genecount\t$IDs[0]\t$domain\t$familysize family size\n");
		#}		
		#$genecount++;
	#}
}



# - # - # - # - # - # - # This subroutine makes a hash where the keys are the families' (groups') names and the each record is an array with all the genes' names. 
sub FAMS{
my $file=shift;
my %dictionary;
open(FILE,$file)or die $!;
my $count =1;
foreach my $line (<FILE>){
	chomp $line;
	#print "$count\n";
	$count++; 
	my @family=split(/\s|\:/,$line); #The group name as given by FastOrtho: ORTHOMCLx where x is the number of group
	#print("$family[0]\n");
	my @genegroup=split(/\t/,$line); #Gets all the genes in the group
	$genegroup[1]=~s/^\s+//; #Erases the initial spaces
	#print("$genegroup[1]\n");
	my @genes=split(/\s/,$genegroup[1]); #Makes an array where each element is a gene
	my @genesarray=();
	foreach my $gene(@genes){
		my @genename=split(/\|/,$gene); #The gene name is composed of several elements, we only need the last one which is the gene code along with the BGC number.
		#print("$genename[6]\n");
		push(@genesarray,$genename[6]);
	}	
	#print("@genesarray\n");
	@{$dictionary{$family[0]}}=@genesarray;
	#print("@{$dictionary{$family[0]}}");
	
} 
close FILE;
return %dictionary
}
# - # - # - # - # - # - #
